{"version":3,"sources":["logo.svg","MainPage/MainFile.js","MainPage/Success.js","MainPage/UploadImage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MainFile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Name","RegdNumber","output","onSubmit","bind","assertThisInitialized","onNumberChange","onNameChange","e","setState","target","value","_this2","user","name","regNo","Axios","post","then","response","k","data","Success","catch","error","console","log","react_default","a","createElement","reactstrap_es","className","type","onChange","style","textAlign","onClick","React","Component","outputData","createMarkUp","divNum","window","location","href","UploadImage","image","imageFile","event","preventDefault","files","FormData","append","Request","send","axios","method","url","headers","Accept","Connect-Time","Connection","Content-Length","Content-Type","body","App","visibleDiv","onSuccess","param","param2","UploadImage_UploadImage","MainPage_Success","info","MainPage_MainFile","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iPC8FzBC,qBAvFf,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAM,CACTC,KAAK,GACLC,WAAW,GACXC,OAAO,IAETV,EAAKW,SAASX,EAAKW,SAASC,KAAdX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACdA,EAAKc,eAAed,EAAKc,eAAeF,KAApBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACpBA,EAAKe,aAAaf,EAAKe,aAAaH,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KATJA,8EAYDgB,GACbb,KAAKc,SAAS,CACZR,WAAWO,EAAEE,OAAOC,6CAIXH,GACXb,KAAKc,SAAS,CACZT,KAAKQ,EAAEE,OAAOC,2CAIR,IAAAC,EAAAjB,KAIFkB,GAFGlB,KAAKI,MAAMC,KACTL,KAAKI,MAAME,WACX,CACPa,KAAKnB,KAAKI,MAAMC,KAChBe,MAAMpB,KAAKI,MAAME,aAErBe,IAAMC,KAAK,wCAAwC,CAACJ,SACjDK,KAAK,SAAAC,GACF,IAAMC,EAAED,EAASE,KACfT,EAAKH,SAAS,CACVP,OAAOkB,IAEXR,EAAKrB,MAAM+B,QAAQV,EAAKb,MAAMG,OAAO,OAI5CqB,MAAM,SAASC,GACZC,QAAQC,IAAI,qBAAkBF,sCAOlC,OACEG,EAAAC,EAAAC,cAAA,WACDF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAKH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAKH,EAAAC,EAAAC,cAAA,8BACXF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,SAAMH,EAAAC,EAAAC,cAAA,SAAOE,UAAU,SAAjB,YACNJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAKH,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,SAAUtC,KAAKY,aACjCI,MAAOhB,KAAKI,MAAMC,SAGxB2B,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,SAAOE,UAAU,SAAjB,mCAEJJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,SAAUtC,KAAKW,eAC9BK,MAAOhB,KAAKI,MAAME,eAG1B0B,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,SAAOE,UAAU,SAAjB,6BAEJJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OACRrB,MAAOhB,KAAKI,MAAME,eAG1B0B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKI,MAAO,CAACC,UAAU,WAAWR,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAKH,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASrB,MAAM,SAC/DyB,QAASzC,KAAKQ,UADqB,qBA/ExBkC,IAAMC,YCyBdhB,cA5BX,SAAAA,EAAY/B,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IACd9B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,KAAMJ,KACDQ,MAAM,CACPwC,WAAW,IAEf/C,EAAKgD,aAAahD,EAAKgD,aAAapC,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KALJA,6JAed,GAAsB,KAAnBG,KAAKJ,MAAMkD,OACd,OACId,EAAAC,EAAAC,cAAA,0BAMDa,OAAOC,SAASC,KAAK,6EAxBVP,IAAMC,WCCPO,cACjB,SAAAA,EAAYtD,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkD,IACdrD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoD,GAAA/C,KAAAH,KAAMJ,KACDQ,MAAM,CAAC+C,MAAM,GAAGC,UAAU,IAC/BvD,EAAKyC,SAASzC,EAAKyC,SAAS7B,KAAdX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACdA,EAAKW,SAASX,EAAKW,SAASC,KAAdX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAJAA,wEAMTwD,GACLA,EAAMC,iBACNtD,KAAKc,SAAS,CACVqC,MAAME,EAAMtC,OAAOwC,MAAM,GACzBH,UAAUC,EAAMtC,OAAOwC,MAAM,GAAGpC,wCAI/BkC,GACLA,EAAMC,iBACN,IAAMH,EAAMnD,KAAKI,MAAM+C,MACnBzB,EAAK,IAAI8B,SACb9B,EAAK+B,OAAO,OAAON,GACnBO,QAAQC,KAAKjC,GACbkC,IAAMtC,KACF,CACIuC,OAAO,OACPC,IAAI,mCACJC,QAAQ,CACJC,OAAU,MAC1BC,eAAgB,IAChBC,WAAc,QACdC,iBAAkB,MAClBC,eAAgB,uBAEJC,KAAK3C,IACNH,KAAK,SAACC,GACLM,QAAQC,IAAIP,EAASE,QACtBE,MAAM,SAACC,GACNC,QAAQC,IAAI,QAAQF,KAExBC,QAAQC,IAAI,8CAIhB,OAAOC,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,QAAM1B,SAAUR,KAAKQ,UACjBwB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOlB,KAAK,SAASmB,SAAUtC,KAAKsC,YAAiBN,EAAAC,EAAAC,cAAA,WAEtEF,EAAAC,EAAAC,cAAA,UAAQG,KAAK,UAAb,UAAsCL,EAAAC,EAAAC,cAAA,oBA/CbQ,IAAMC,WCyChC2B,cAnCX,SAAAA,EAAY1E,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsE,IAChBzE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwE,GAAAnE,KAAAH,KAAMJ,KACDQ,MAAM,CACTmE,WAAW,IACX7C,KAAK,IAEP7B,EAAK2E,UAAU3E,EAAK2E,UAAU/D,KAAfX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KANCA,yEAQR4E,EAAMC,GACZ5C,QAAQC,IAAI,kBAAkB0C,GAC9BzE,KAAKc,SAAS,CACZY,KAAK+C,EACLF,WAAWG,IAEb5C,QAAQC,IAAI/B,KAAKI,MAAMsB,uCAIzB,OACEM,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,UAAU,cACvBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cAEbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAkC,KAAvBpC,KAAKI,MAAMmE,WAAgB,IAAI,gBAC7CvC,EAAAC,EAAAC,cAACyC,EAAD,OAEF3C,EAAAC,EAAAC,cAAA,OAAKE,UAAkC,KAAvBpC,KAAKI,MAAMmE,WAAgB,IAAI,gBAC7CvC,EAAAC,EAAAC,cAAC0C,EAAD,CAASC,KAAM7E,KAAKI,MAAMsB,KAAMoB,OAAQ9C,KAAKI,MAAMmE,aACnDvC,EAAAC,EAAAC,cAAC4C,EAAD,CAAUnD,QAAS3B,KAAKwE,sBA5BhB7B,aCIEoC,QACW,cAA7BhC,OAAOC,SAASgC,UAEe,UAA7BjC,OAAOC,SAASgC,UAEhBjC,OAAOC,SAASgC,SAASC,MACvB,iECZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlE,KAAK,SAAAmE,GACjCA,EAAaC","file":"static/js/main.9f27b0c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport Axios from 'axios';\r\nimport {Row,Col,Container} from \"reactstrap\";\r\nimport \"../MainPage/main.css\"\r\n\r\n\r\nclass MainFile extends React.Component{\r\nconstructor(props){\r\n    super(props);\r\n    this.state={\r\n      Name:\"\",\r\n      RegdNumber:\"\",\r\n      output:{}\r\n    }\r\n    this.onSubmit=this.onSubmit.bind(this);\r\n    this.onNumberChange=this.onNumberChange.bind(this);\r\n    this.onNameChange=this.onNameChange.bind(this);\r\n  }\r\n\r\n  onNumberChange(e){\r\n    this.setState({\r\n      RegdNumber:e.target.value,\r\n    })\r\n  }\r\n\r\n  onNameChange(e){\r\n    this.setState({\r\n      Name:e.target.value\r\n    })\r\n  }\r\n\r\n  onSubmit(){\r\n    var output;\r\n    var name=this.state.Name;\r\n    var number=this.state.RegdNumber;\r\n    const user={\r\n        name:this.state.Name,\r\n        regNo:this.state.RegdNumber\r\n    }\r\n    Axios.post(\"http://127.0.0.1:5000/validateDetails\",{user})\r\n      .then(response=>{\r\n          const k=response.data;\r\n            this.setState({\r\n                output:k\r\n            })\r\n            this.props.Success(this.state.output,\"2\");\r\n      }\r\n      )\r\n          \r\n    .catch(function(error){\r\n        console.log(\" --> Error hit \"+error);\r\n    })\r\n    \r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n     <Container >\r\n         <Row><Col><h1>Loan Insurance</h1></Col></Row>\r\n        <Row>\r\n        <Col> <label className=\"text1\">Name : </label></Col>\r\n        <Col><input type=\"text\" onChange={this.onNameChange}\r\n              value={this.state.Name}/>\r\n        </Col>  \r\n        </Row> \r\n        <Row>\r\n        <Col>\r\n            <label className=\"text1\">Vehicle Registration Number : </label>\r\n        </Col>\r\n        <Col>\r\n            <input type=\"text\" onChange={this.onNumberChange}\r\n                value={this.state.RegdNumber}/>\r\n        </Col>\r\n        </Row>\r\n        <Row>\r\n        <Col>\r\n            <label className=\"text1\">Vehicle Chasis Number : </label>\r\n        </Col>\r\n        <Col>\r\n            <input type=\"text\"\r\n                value={this.state.RegdNumber}/>\r\n        </Col>\r\n        </Row>      \r\n        <Row style={{textAlign:\"center\"}}><Col><button type=\"submit\" value=\"Submit\"\r\n            onClick={this.onSubmit}>Submit</button></Col>\r\n        </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\nexport default MainFile;","import React from \"react\"\r\nvar htmlDoc;\r\nclass Success extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            outputData:{},\r\n        }\r\n        this.createMarkUp=this.createMarkUp.bind(this);\r\n\r\n    }\r\n    createMarkUp(){\r\n\r\n    }\r\n    componentDidMount(){\r\n       \r\n    }\r\n    render(){\r\n        if(this.props.divNum!=\"2\"){\r\n        return(\r\n            <div>\r\n                Reutrn NUll\r\n            </div>\r\n        );\r\n        }\r\n        else{\r\n           window.location.href=\"https://watson-vehicle-damage-analyzer-capgeminitest.mybluemix.net/\";\r\n        }\r\n    }\r\n}\r\n\r\nexport default Success;","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default class UploadImage extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={image:'',imageFile:''}\r\n        this.onChange=this.onChange.bind(this);\r\n        this.onSubmit=this.onSubmit.bind(this);\r\n    }\r\n    onChange(event){\r\n        event.preventDefault();\r\n        this.setState({\r\n            image:event.target.files[0],\r\n            imageFile:event.target.files[0].name,\r\n        })\r\n    }\r\n    \r\n    onSubmit(event){\r\n        event.preventDefault();\r\n        const image=this.state.image;\r\n        var data=new FormData();\r\n        data.append('file',image);\r\n        Request.send(data);\r\n        axios.post(\r\n            {   \r\n                method:\"POST\",\r\n                url:\"http://127.0.0.1:5000/validating\",\r\n                headers:{\r\n                    \"Accept\": \"*/*\", \r\n    \"Connect-Time\": \"1\", \r\n    \"Connection\": \"close\", \r\n    \"Content-Length\": \"236\", \r\n    \"Content-Type\": \"multipart/form-data\",\r\n                },\r\n                body:data\r\n            }).then((response)=>{\r\n                console.log(response.data);\r\n            }).catch((error)=>{\r\n                console.log(\"error\"+error);\r\n            })\r\n            console.log(\"Completed\");\r\n    }\r\n    \r\n    render(){\r\n        return(<div>\r\n            <form onSubmit={this.onSubmit}>\r\n                <br/>\r\n                <div><input type=\"file\" name=\"aadhar\" onChange={this.onChange}/></div><br/>\r\n                \r\n                <button type=\"submit\" >submit</button><br/>\r\n            </form>\r\n        </div>)\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {Row,Col,Container} from \"reactstrap\";\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Axios from 'axios';\r\nimport MainFile from \"./MainPage/MainFile\";\r\nimport Success from \"./MainPage/Success\";\r\nimport UploadImage from \"./MainPage/UploadImage\"\r\nclass App extends Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state={\r\n        visibleDiv:\"1\",\r\n        data:{}\r\n      }\r\n      this.onSuccess=this.onSuccess.bind(this);\r\n    }\r\n    onSuccess(param,param2){\r\n        console.log(\"Success app.js \"+param);\r\n        this.setState({\r\n          data:param,\r\n          visibleDiv:param2\r\n        })\r\n        console.log(this.state.data);\r\n\r\n    }\r\n    render(){\r\n      return(\r\n        <Container className=\"background\">\r\n      <div className=\"background\">\r\n\r\n        <div className={this.state.visibleDiv==\"1\"?\" \":\" displayNone\"}>\r\n          <UploadImage />\r\n        </div>\r\n        <div className={this.state.visibleDiv==\"2\"?\" \":\" displayNone\"}>\r\n          <Success info={this.state.data} divNum={this.state.visibleDiv}/>\r\n          <MainFile Success={this.onSuccess}/>\r\n        </div>\r\n\r\n      </div>\r\n      </Container>);\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}